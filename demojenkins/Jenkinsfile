node {
    stage ("Build") {
        docker.image("maven").inside {
            stage ("Build") {
                //sh "docker run -it --rm --name maven-project -v /root/.jenkins/workspace/java-full-pipeline/demojenkins/:/usr/src/mymaven/ -w /usr/src/mymaven/ maven mvn clean install"
                sh "docker --version"
            }
        }
    }
}

/*pipeline {
    agent any

    stages {
        stage ('Build') {
            steps {
                sh 'mvn -f demojenkins/pom.xml clean install'
                //sh 'mvn -f demojenkins/pom.xml clean package'
            }
        }

        stage('Setup container JDK') {
            steps {
                sh 'docker container stop java-jdk'
                sh 'docker container rm java-jdk'
                sh 'docker run --name java-jdk -d -v /opt/tomcat/.jenkins/workspace/java-full-pipeline/demojenkins/target:/home -i openjdk'
            }
        }

        stage ('Deloy') {
            steps {
                sh 'docker exec java-jdk java -jar /home/demojenkins-0.0.1-SNAPSHOT.jar'
            }
        }
    }
}
*/

// stage deloy QA
// - copy file jar to VM 2 
// - excute command as jenkins file 
// note: Tao con VM 2, deloy len con VM 2
