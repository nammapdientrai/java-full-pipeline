/*node {
    try {
        docker.image("maven").inside {
            stage ("Clone code Git"){
                checkout scm
            }

            stage ("Check environment") {
                sh "mvn --version"
                sh "java --version"
                sh "javac --version"
            }

            stage ("Check path") {
                sh "cd /root/.jenkins/workspace/java-full-pipeline/demojenkins/ && ls"
            }

            stage ("Build") {
                sh "mvn -f /root/.jenkins/workspace/java-full-pipeline/demojenkins/ package"
            }

            stage ("Test") {
                sh "mvn -f /root/.jenkins/workspace/java-full-pipeline/demojenkins/ test"
            }
            
            stage ("Display report") {
                echo "Display report ...."
            }

            stage ("Deloy") {
                echo "Deloy ...."
            }
        }
    } catch (e) {
        throw e
    } finally {
        def currentResult = currentBuild.result ?: 'SUCCESS'

        def DATE = sh(returnStdout: true, script: "date +'%d-%m-%y'")

        def NOTIFICATION_SUCCESS = "'{\"text\":\"NAM == SUCCESS, ${DATE}\"}'"
        def NOTIFICATION_FAILTURE = "'{\"text\":\"NAM == FAILTURE ${DATE}\"}'"
        def API_A = "https://hooks.slack.com/services/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"
        

        if (currentResult == 'SUCCESS') {
            sh "curl -X POST -H 'Content-type: application/json' --data ${NOTIFICATION_SUCCESS} ${API_A}"
        } else {
            sh "curl -X POST -H 'Content-type: application/json' --data ${NOTIFICATION_FAILTURE} ${API_A}"
        }
    }
}*/

//API_A = "https://hooks.slack.com/services/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"

//NOTIFICATION_SUCCESS = "'{\"text\":\"SUCCESS\"}'"
//NOTIFICATION_FAILTURE = "'{\"text\":\"FAILTURE\"}'"

pipeline {
    agent any

    

    stages {
        stage ('Build') {
            steps {
                //sh 'mvn -f demojenkins/pom.xml clean install'
                //sh 'mvn -f demojenkins/pom.xml clean package'
                echo "Build success"
            }
        }

        stage('Setup container JDK') {
            steps {
                sh 'docker container stop java-jdk'
                sh 'docker container rm java-jdk'
                sh 'docker run --name java-jdk -d -v /root/.jenkins/workspace/java-full-pipeline/demojenkins/target:/home -i openjdk'
            }
        }

        stage ('Deloy') {
            steps {
                sh 'docker exec java-jdk java -jar /home/demojenkins-0.0.1-SNAPSHOT.jar'
            }
        }
    }

    post {
        success {
            sh "curl -X POST -H 'Content-type: application/json' --data ${params.NOTIFICATION_SUCCESS} ${params.API_A}"
        }

        failure {
            sh "curl -X POST -H 'Content-type: application/json' --data ${params.NOTIFICATION_SUCCESS} ${params.API_A}"
        }
    }
}


// stage deloy QA
// - copy file jar to VM 2 
// - excute command as jenkins file 
// note: Tao con VM 2, deloy len con VM 2
