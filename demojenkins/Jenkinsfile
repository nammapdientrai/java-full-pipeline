/*node {
    stage ("Build") {
        docker.image("maven").inside {
            
        }
    }

    stage ("Docker version") {
        sh "docker run --rm --name maven-project -v /root/.jenkins/workspace/java-full-pipeline/demojenkins/:/usr/src/mymaven/ -w /usr/src/mymaven/ maven mvn clean install"
    }
}*/

API_A = "https://hooks.slack.com/services/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"

NOTIFICATION_SUCCESS = "'{\"text\":\"SUCCESS\"}''"
NOTIFICATION_FAILTURE = "'{\"text\":\"FAILTURE\"}''"

pipeline {
    agent any

    stages {
        stage ('Build') {
            steps {
                sh 'mvn -f demojenkins/pom.xml clean install'
                //sh 'mvn -f demojenkins/pom.xml clean package'
            }
        }

        /*stage('Setup container JDK') {
            steps {
                sh 'docker container stop java-jdk'
                sh 'docker container rm java-jdk'
                sh 'docker run --name java-jdk -d -v /root/.jenkins/workspace/java-full-pipeline/demojenkins/target:/home -i openjdk'
            }
        }

        stage ('Deloy') {
            steps {
                sh 'docker exec java-jdk java -jar /home/demojenkins-0.0.1-SNAPSHOT.jar'
            }
        }*/
    }

    post {
        success {
            sh "curl -X POST -H 'Content-type: application/json' --data ${NOTIFICATION_SUCCESS} ${API_A}"
        }

        failure {
            sh "curl -X POST -H 'Content-type: application/json' --data ${NOTIFICATION_SUCCESS} ${API_A}"
        
        }
    }
}


// stage deloy QA
// - copy file jar to VM 2 
// - excute command as jenkins file 
// note: Tao con VM 2, deloy len con VM 2
