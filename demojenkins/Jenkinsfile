pipeline {
    agent any

    environment {
        PATH_PROJECT = "cd /root/.jenkins/workspace/java-full-pipeline"

        COMMAND = "curl -X POST -H 'Content-type: application/json' --data"

        API_A = 'https://hooks.slack.com/services/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'
        
        DATE = sh(returnStdout: true, script: "date +'%d-%m-%y'")

        NOTIFICATION_SUCCESS = "'{\"text\":\"NAM == SUCCESS, ${DATE}\"}'"
        NOTIFICATION_FAILTURE = "'{\"text\":\"NAM == FAILTURE, ${DATE}\"}'"       
    }

    stages {
        stage ("Begin") {
            steps {
                sh "apt install maven"
            }
        }

        stage ("Build") {
            steps {
                //sh 'mvn -f demojenkins/pom.xml clean package'
                echo "Build ...."
            }
        }

        stage ("Test") {
            steps {
                //step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                echo "Test ...."
            }
        }

        stage ("Deloy") {
            steps {
                echo "Deloy ...."
            }
        }
    }

    post {
        success {
            sh "${COMMAND} ${NOTIFICATION_SUCCESS} ${API_A}"

            //sh "${PATH_PROJECT} && git config --global user.name nammapdientrai"
            //sh "${PATH_PROJECT} && git config --global user.email nammapdientrai@gmail.com"

            script {
                def version_curent = sh(returnStdout: true, script: "${PATH_PROJECT} && git tag")

                if (version_curent != null) {
                    echo "${version_curent}"

                    /*def beforeColon = version_curent.substring(1)
                    double rate = (Double.parseDouble("${beforeColon}") + Double.parseDouble("0.1"))

                    double version_auto =  Math.round(rate * 10) / 10 

                    sh "${PATH_PROJECT} && git tag -d ${version_curent}"
                    sh "${PATH_PROJECT} && git tag v${version_auto}"
                    
                    sh "${PATH_PROJECT} && git push origin v${version_auto}"*/
                } else{
                    echo "Version null"
                }
            }
        }

        failure {
            sh "${COMMAND} ${NOTIFICATION_FAILTURE} ${API_A}"
        }
    }
}




// stage deloy QA
// - copy file jar to VM 2 
// - excute command as jenkins file 
// note: Tao con VM 2, deloy len con VM 2
