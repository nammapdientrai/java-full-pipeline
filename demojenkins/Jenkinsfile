pipeline {
    agent any

    environment {
        PATH_PROJECT = "/root/.jenkins/workspace/java-full-pipeline"

        COMMAND = "curl -X POST -H 'Content-type: application/json' --data"

        API_A = 'https://hooks.slack.com/services/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'
        
        DATE = sh(returnStdout: true, script: "date +'%d-%m-%y'")

        NOTIFICATION_SUCCESS = "'{\"text\":\"NAM == SUCCESS, ${DATE}\"}'"
        NOTIFICATION_FAILTURE = "'{\"text\":\"NAM == FAILTURE, ${DATE}\"}'"     
    }

    stages {
        stage ("Begin") {
            steps {
                //sh "apt install maven"
                echo "Begin ...."
            }
        }

        stage ("Build") {
            steps {
                //sh 'mvn -f demojenkins/pom.xml clean package'
                echo "Build ...."
            }
        }

        stage ("Test") {
            steps {
                //step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                echo "Test ...."
            }
        }

        stage('Sonarqube') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }

            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }

                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        /*stage ("Deloy") {
            steps {
                sh "cd /root/.jenkins/workspace/java-full-deloy/demojenkins/target && cp demojenkins-0.0.1-SNAPSHOT.jar /home/namth22/artifact/"
                sh "chmod 777 -R /home/namth22/artifact/."
                
                sh "cd /root/.jenkins/workspace/java-full-deloy/ansible && ansible-playbook java-deloy.yml -i hosts -u namth22 -b"
                
                //sh "cd /root/.jenkins/workspace/java-full-deloy/demojenkins/target && java -jar demojenkins-0.0.1-SNAPSHOT.jar"
                //sh "cd /home/namth22/ansible-playbook && ansible-playbook java-deloy.yml -i hosts -u namth22 -b"
                //echo "Deloy ...."
            }
        }*/
    }

    post {
        success {
            sh "${COMMAND} ${NOTIFICATION_SUCCESS} ${API_A}"

            //sh "${PATH_PROJECT} && git config --global user.name nammapdientrai"
            //sh "${PATH_PROJECT} && git config --global user.email nammapdientrai@gmail.com"

            /*script {
                for (int i = 0; i < 20; i++) {
                    def version_curent = sh(returnStdout: true, script: "${PATH_PROJECT} && git tag")

                    if (version_curent == "") {
                        version_curent = "v0.0"
                    } else{
                        sh "${PATH_PROJECT} && git tag -d ${version_curent}"
                    }

                    def beforeColon = version_curent.substring(1)
                    double rate = (Double.parseDouble("${beforeColon}") + Double.parseDouble("0.1"))

                    double version_auto =  Math.round(rate * 10) / 10 

                    sh " cd ${PATH_PROJECT} && git tag v${version_auto}"

                    sh "git remote set-url origin https://nammapdientrai:Thn025381961@github.com/nammapdientrai/java-full-pipeline.git"

                    sh "${PATH_PROJECT} && git push origin v${version_auto}"
                }
            }*/
        }

        failure {
            sh "${COMMAND} ${NOTIFICATION_FAILTURE} ${API_A}"
        }
    }
}




// stage deloy QA
// - copy file jar to VM 2 
// - excute command as jenkins file 
// note: Tao con VM 2, deloy len con VM 2
